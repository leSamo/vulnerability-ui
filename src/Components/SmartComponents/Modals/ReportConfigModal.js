import React, { useState } from 'react';
import { Modal, Button, Form, FormGroup, TextInput, Grid, GridItem, Checkbox, TextArea, 
    Dropdown, DropdownItem, DropdownToggle, Stack } from '@patternfly/react-core';
import { AngleDownIcon } from '@patternfly/react-icons';
import CustomReportFilter from '../Reports/CustomReportFilter';

const ReportConfigModal = props => {
    const [isFilterMenuOpen, setFilterMenuOpen] = useState(false);
    const [activeFilters, setActiveFilters] = useState([]);
    const [columnsToInclude, setColumnsToInclude] = useState(['cve_id', 'publish_date', 'show_all',
    'business_risk_id', 'impact', 'status_id', 'cvss_filter', 'security_rule_indicator']);

    const downloadReport = () => {        
        console.log('calling download report');
    }

    const toggleFilterMenu = () => {
        if (!isFilterMenuOpen) {
            setFilterMenuOpen(true);
        }
        else {
            setFilterMenuOpen(false);
        }
    }

    const closeFilterMenu = () => {
        setFilterMenuOpen(false);
    }

    const addFilter = newFilter => {
        if (!activeFilters.includes(newFilter)) {
            setActiveFilters([...activeFilters, newFilter])
        }
    }

    const removeFilter = filterToDelete => {
        const index = activeFilters.indexOf(filterToDelete);

        if (index >Â -1) {
            // necessary to prevent state mutation
            let temp = activeFilters.slice();
            temp.splice(index, 1);
            setActiveFilters(temp);
        }
    }

    const handleCheckboxChange = (parameter, value) => {
        if (value) {
            setColumnsToInclude([...columnsToInclude, parameter]);
        }
        else {
            setColumnsToInclude(columnsToInclude.filter(item => item != parameter));
        }
    }

    // will be imported from constants.js
    const filterDropdownOptions = [ 
        <DropdownItem
            key="publish_date"
            isDisabled={activeFilters.includes("publish_date")}
            onClick={() => addFilter("publish_date")}
        >     
            Publish day
        </DropdownItem>,
        <DropdownItem
            key="impact"
            isDisabled={activeFilters.includes("impact")}
            onClick={() => addFilter("impact")}
        >
            Severity
        </DropdownItem>,
        <DropdownItem
            key="cvss_filter"
            isDisabled={activeFilters.includes("cvss_filter")}
            onClick={() => addFilter("cvss_filter")}
        >
            CVSS base score
        </DropdownItem>,
        <DropdownItem
            key="show_all"
            isDisabled={activeFilters.includes("show_all")}
            onClick={() => addFilter("show_all")}
        >
            Systems exposed
        </DropdownItem>,
        <DropdownItem
            key="business_risk_id"
            isDisabled={activeFilters.includes("business_risk_id")}
            onClick={() => addFilter("business_risk_id")}
        >
            Business risk
        </DropdownItem>,
        <DropdownItem
            key="status_id"
            isDisabled={activeFilters.includes("status_id")}
            onClick={() => addFilter("status_id")}
        >
            Status
        </DropdownItem>,
        <DropdownItem
            key="security_rule"
            isDisabled={activeFilters.includes("security_rule")}
            onClick={() => addFilter("security_rule")}
        >
            Security rule
        </DropdownItem>
    ]

    return (
        <Modal
            title="Report by CVEs"
            variant="small"
            isOpen={props.isOpen}
            onClose={props.onClose}
            actions={[
                <Button key="save" variant="primary" onClick={downloadReport}>
                    Export report
                </Button>,
                <Button key="cancel" variant="secondary" onClick={props.onClose}>
                    Cancel
                </Button>
            ]}
        >
            <Form>
                <FormGroup label="Report title" fieldId="horizontal-form-name">
                    <TextInput
                        value={"Insights Vulnerability CVE Report"}
                        type="text"
                        id="horizontal-form-name"
                    />
                </FormGroup>
                <FormGroup label="Data to include" fieldId="horizontal-form-name">
                    <Grid hasGutter>
                        {/* probably read array from constants.js */}
                        <GridItem span={6}>
                            <Checkbox id="cve_id" label="CVE ID" isChecked isDisabled/>
                        </GridItem>
                        <GridItem span={6}>
                            <Checkbox
                                id="show_all"
                                label="Systems exposed"
                                isChecked={columnsToInclude.includes("show_all")}
                                onChange={value => handleCheckboxChange("show_all", value)}
                            />
                        </GridItem>
                        <GridItem span={6}>
                            <Checkbox
                                id="publish_date"
                                label="Publish date"
                                isChecked={columnsToInclude.includes("publish_date")}
                                onChange={value => handleCheckboxChange("publish_date", value)}
                            />
                        </GridItem>
                        <GridItem span={6}>
                            <Checkbox
                                id="business_risk_id"
                                label="Business risk"
                                isChecked={columnsToInclude.includes("business_risk_id")}
                                onChange={value => handleCheckboxChange("business_risk_id", value)}
                            />
                        </GridItem>
                        <GridItem span={6}>
                            <Checkbox
                                label="Impact"
                                isChecked={columnsToInclude.includes("impact")}
                                onChange={value => handleCheckboxChange("impact", value)}
                            />
                        </GridItem>
                        <GridItem span={6}>
                            <Checkbox
                                id="status_id"
                                label="Status"
                                isChecked={columnsToInclude.includes("status_id")}
                                onChange={value => handleCheckboxChange("status_id", value)}
                            />
                        </GridItem>
                        <GridItem span={6}>
                            <Checkbox
                                id="cvss_filter"
                                label="CVSS base score"
                                isChecked={columnsToInclude.includes("cvss_filter")}
                                onChange={value => handleCheckboxChange("cvss_filter", value)}
                            />
                        </GridItem>
                        <GridItem span={6}>
                            <Checkbox
                                id="security_rule_indicator"
                                label="Security rule indicator"
                                isChecked={columnsToInclude.includes("security_rule_indicator")}
                                onChange={value => handleCheckboxChange("security_rule_indicator", value)}
                            />
                        </GridItem>
                    </Grid>
                </FormGroup>
                <FormGroup label="Filter data by" fieldId="horizontal-form-name">
                    {activeFilters.length === 0
                        ? <span style={{color: "var(--pf-global--Color--200)"}}>No filters applied.<br/></span>
                        : <Stack hasGutter>
                            {activeFilters.map(item => {
                                return (
                                    <CustomReportFilter
                                        key={item}
                                        name={item}
                                        handleRemove={(item) => removeFilter(item)}
                                    />
                                );
                            })}
                        </Stack>
                    }
                    
                    <Dropdown
                        isPlain
                        direction="up"
                        onSelect={closeFilterMenu}
                        toggle={
                            <DropdownToggle id="filterToggle" onToggle={toggleFilterMenu}
                            toggleIndicator={AngleDownIcon} style={{padding: "0px", 
                            color: "var(--pf-global--link--Color)"}}>
                                Add filter
                            </DropdownToggle>
                        }
                        isOpen={isFilterMenuOpen}
                        dropdownItems={filterDropdownOptions}
                        className="pf-u-mt-md"
                    />
                </FormGroup>
                <FormGroup label="User notes (optional)" fieldId="horizontal-form-name">
                    <TextArea
                        type="text"
                        id="horizontal-form-name"
                    />
                </FormGroup>
            </Form>
        </Modal>
    );
}

export default ReportConfigModal;