import React, { useState } from 'react';
import { StackItem, Split, SplitItem, Text, TextVariants, TextContent, Radio } from '@patternfly/react-core';
import { CloseIcon } from '@patternfly/react-icons';
import { FILTERS, BUSINESS_RISK_OPTIONS, STATUS_OPTIONS } from '../../../Helpers/constants';

const CustomReportFilter = props => {
    const [businessRiskId, setBusinessRiskId] = useState('0');
    const [statusId, setStatusId] = useState('0');

    const handleOnRadioChangeBusinessRisk = (_, event) => {
        const { value } = event.currentTarget;
        setBusinessRiskId(value);
    };

    const handleOnRadioChangeStatus = (_, event) => {
        const { value } = event.currentTarget;
        setStatusId(value);
    };

    const businessRisk = (
        <React.Fragment>
            {BUSINESS_RISK_OPTIONS.map(item => (
                <Radio
                    className={'pf-u-ml-md pf-u-mt-xs'}
                    value={item.value}
                    isChecked={businessRiskId === item.value}
                    onChange={handleOnRadioChangeBusinessRisk}
                    label={item.label}
                    key={item.label}
                    id={item.label}
                    name={item.label}
                    aria-label={item.label}
                />
            ))}
        </React.Fragment>
    );

    const status = (
        <React.Fragment>
            {STATUS_OPTIONS.map(item => (
                <Radio
                    className={'pf-u-ml-md pf-u-mt-xs'}
                    value={item.value}
                    isChecked={statusId === item.value}
                    onChange={handleOnRadioChangeStatus}
                    label={item.label}
                    key={item.label}
                    id={item.label}
                    name={item.label}
                    aria-label={item.label}
                />
            ))}
        </React.Fragment>
    );

    const content = name => {
        switch (name) {
            case "status_id":
                return status;
            case "business_risk_id":
                return businessRisk;
            default:
                return null;
        }
    }

    return (
        <StackItem>
            <Split hasGutter>
                <SplitItem>
                    <TextContent>
                        <Text component={TextVariants.h4}>{FILTERS[props.name].title}</Text>
                    </TextContent>
                </SplitItem>
                <SplitItem>
                    <CloseIcon
                        color="var(--pf-global--Color--200)"
                        // make sure to remove entry in state
                        onClick={() => props.handleRemove(props.name)}
                        style={{cursor: "pointer", fontSize: 12 }}
                    />
                </SplitItem>
            </Split>
            {content(props.name)}
        </StackItem>
    )
}

export default CustomReportFilter;