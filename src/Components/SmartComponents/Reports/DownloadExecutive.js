
import React, { useState } from 'react';
import { useIntl } from 'react-intl';
import { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';
import { getExecutiveReport } from '../../../Helpers/APIHelper';
import messages from '../../../Messages';
import buildExecReport from './BuildExecReport';
import { Fragment } from 'react';
import { useNotification, useClearNotifications } from '../../../Helpers/Hooks';
import FooterPDF from './Common/FooterPDF';

const DownloadExecutive = () => {
    const intl = useIntl();
    const [isLoading, setLoading] = useState(false);
    const [renderPDF, setRenderPDF] = useState(false);
    const [hasRule, setSecurityRulesPresent] = useState(false);
    const [hasExploit, setExploit] = useState(false);
    const addNotification = useNotification();
    const clearNotifications = useClearNotifications();

    const dataFetch = async () => {
        setLoading(true);

        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });

        let data;

        try {
            data = await getExecutiveReport();
        }
        catch {
            clearNotifications();
            addNotification({
                variant: 'danger',
                autoDismiss: false,
                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),
                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)
            });
        }

        const report = buildExecReport({ data, intl });
        setSecurityRulesPresent(() => data.top_cves.some(cve => cve.security_rule === true));
        setExploit(() => data.top_cves.some(cve => cve.known_exploit === true));

        setLoading(false);

        clearNotifications();
        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });

        return [...report];
    };

    const [date] = new Date().toISOString().split('T');

    const handleDownloadButton = () => {
        setRenderPDF(true);
    };

    return (
        <Fragment>
            <a onClick={() => handleDownloadButton()}>
                {intl.formatMessage(messages.executiveReportCardButton)}
            </a>
            {
                renderPDF && <DownloadButton
                    type={intl.formatMessage(messages.vulnerabilitiesHeader)}
                    fileName={`vulnerability_executive-report--${date}.pdf`}
                    buttonProps={{ variant: 'link', isInline: true }}
                    groupName="Red Hat Insights"
                    asyncFunction={dataFetch}
                    allPagesHaveTitle={false}
                    showButton={false}
                    footer={<FooterPDF intl={intl} hasRule={hasRule} hasExploit={hasExploit} />}
                    label={
                        isLoading
                            ? intl.formatMessage(messages.loading)
                            : intl.formatMessage(messages.executiveReportCardButton)
                    }
                    onSuccess={() => {
                        setRenderPDF(false);
                    }}

                />
            }
        </Fragment>
    );

};

export default DownloadExecutive;
